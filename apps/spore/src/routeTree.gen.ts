/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SImport } from './routes/s'
import { Route as AppImport } from './routes/_app'

// Create Virtual Routes

const StartLazyImport = createFileRoute('/start')()
const IndexLazyImport = createFileRoute('/')()
const AppVaultsLazyImport = createFileRoute('/_app/vaults')()
const AppSettingLazyImport = createFileRoute('/_app/setting')()
const AppReferralLazyImport = createFileRoute('/_app/referral')()
const AppHomeLazyImport = createFileRoute('/_app/home')()
const AppBoardLazyImport = createFileRoute('/_app/board')()
const AppAboutLazyImport = createFileRoute('/_app/about')()

// Create/Update Routes

const StartLazyRoute = StartLazyImport.update({
  path: '/start',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/start.lazy').then((d) => d.Route))

const SRoute = SImport.update({
  path: '/s',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AppVaultsLazyRoute = AppVaultsLazyImport.update({
  path: '/vaults',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app.vaults.lazy').then((d) => d.Route))

const AppSettingLazyRoute = AppSettingLazyImport.update({
  path: '/setting',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app.setting.lazy').then((d) => d.Route))

const AppReferralLazyRoute = AppReferralLazyImport.update({
  path: '/referral',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app.referral.lazy').then((d) => d.Route))

const AppHomeLazyRoute = AppHomeLazyImport.update({
  path: '/home',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app.home.lazy').then((d) => d.Route))

const AppBoardLazyRoute = AppBoardLazyImport.update({
  path: '/board',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app.board.lazy').then((d) => d.Route))

const AppAboutLazyRoute = AppAboutLazyImport.update({
  path: '/about',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/_app.about.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/s': {
      preLoaderRoute: typeof SImport
      parentRoute: typeof rootRoute
    }
    '/start': {
      preLoaderRoute: typeof StartLazyImport
      parentRoute: typeof rootRoute
    }
    '/_app/about': {
      preLoaderRoute: typeof AppAboutLazyImport
      parentRoute: typeof AppImport
    }
    '/_app/board': {
      preLoaderRoute: typeof AppBoardLazyImport
      parentRoute: typeof AppImport
    }
    '/_app/home': {
      preLoaderRoute: typeof AppHomeLazyImport
      parentRoute: typeof AppImport
    }
    '/_app/referral': {
      preLoaderRoute: typeof AppReferralLazyImport
      parentRoute: typeof AppImport
    }
    '/_app/setting': {
      preLoaderRoute: typeof AppSettingLazyImport
      parentRoute: typeof AppImport
    }
    '/_app/vaults': {
      preLoaderRoute: typeof AppVaultsLazyImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AppRoute.addChildren([
    AppAboutLazyRoute,
    AppBoardLazyRoute,
    AppHomeLazyRoute,
    AppReferralLazyRoute,
    AppSettingLazyRoute,
    AppVaultsLazyRoute,
  ]),
  SRoute,
  StartLazyRoute,
])

/* prettier-ignore-end */
